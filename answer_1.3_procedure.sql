--анонимный блок и логирование после процедуры


CREATE
OR REPLACE PROCEDURE DM.FILL_F101_ROUND_F (ION_DATE DATE) AS $$
begin
CREATE TABLE table_1 as 
SELECT
	(ION_DATE - INTERVAL '1 month')::DATE AS FROM_DATE,
	(ION_DATE - INTERVAL '1 day')::DATE AS TO_DATE,
	"CHAPTER",
	"LEDGER_ACCOUNT",
	ACC."CHAR_TYPE" AS CHARACTERISTIC,
	SUM(ACC_B.BALANCE_OUT_RUB) FILTER (
		WHERE
			ACC."CURRENCY_CODE" = '810'
			OR ACC."CURRENCY_CODE" = '643'
	) AS BALANCE_IN_RUB,
	SUM(ACC_B.BALANCE_OUT_RUB) FILTER (
		WHERE
			ACC."CURRENCY_CODE" <> '810'
			AND ACC."CURRENCY_CODE" <> '643'
	) AS BALANCE_IN_VAL,
	SUM(ACC_B.BALANCE_OUT_RUB) AS BALANCE_IN_TOTAL
FROM
	DS.MD_LEDGER_ACCOUNT_S AS LDG
	JOIN DS.MD_ACCOUNT_D AS ACC ON LDG."LEDGER_ACCOUNT" = LEFT(ACC."ACCOUNT_NUMBER", 5)::INTEGER
	--берём записи баланса за день предшедствующий отчётному периоду
	LEFT JOIN DM.DM_ACCOUNT_BALANCE_F AS ACC_B ON ACC_B.ON_DATE = (
		(
			(ION_DATE - INTERVAL '1 month') - INTERVAL '1 day'
		)::DATE
	)
	AND ACC_B.ACCOUNT_RK = ACC."ACCOUNT_RK"
GROUP BY
	LDG."LEDGER_ACCOUNT",
	"CHAPTER",
	ACC."CHAR_TYPE";


---------for DEBET,CREDIT,BALANCE end-----------
CREATE TABLE table_2 as
SELECT
	"LEDGER_ACCOUNT",
	SUM(ACC_TUR.DEBET_AMOUNT_RUB) FILTER (
		WHERE
			ACC."CURRENCY_CODE" = '810'
			OR ACC."CURRENCY_CODE" = '643'
	) AS TURN_DEB_RUB,
	SUM(ACC_TUR.DEBET_AMOUNT_RUB) FILTER (
		WHERE
			ACC."CURRENCY_CODE" <> '810'
			AND ACC."CURRENCY_CODE" <> '643'
	) AS TURN_DEB_VAL,
	SUM(ACC_TUR.DEBET_AMOUNT_RUB) AS TURN_DEB_TOTAL,
	SUM(ACC_TUR.CREDIT_AMOUNT_RUB) FILTER (
		WHERE
			ACC."CURRENCY_CODE" = '810'
			OR ACC."CURRENCY_CODE" = '643'
	) AS TURN_CRE_RUB,
	SUM(ACC_TUR.CREDIT_AMOUNT_RUB) FILTER (
		WHERE
			ACC."CURRENCY_CODE" <> '810'
			AND ACC."CURRENCY_CODE" <> '643'
	) AS TURN_CRE_VAL,
	SUM(ACC_TUR.CREDIT_AMOUNT_RUB) AS TURN_CRE_TOTAL,
	SUM(ACC_B.BALANCE_OUT_RUB) FILTER (
		WHERE
			ACC."CURRENCY_CODE" = '810'
			OR ACC."CURRENCY_CODE" = '643'
			AND ACC_B.ON_DATE = (ION_DATE - INTERVAL '1 day')::DATE
	) AS BALANCE_OUT_RUB,
	SUM(ACC_B.BALANCE_OUT_RUB) FILTER (
		WHERE
			ACC."CURRENCY_CODE" <> '810'
			AND ACC."CURRENCY_CODE" <> '643'
			AND ACC_B.ON_DATE = (ION_DATE - INTERVAL '1 day')::DATE
	) AS BALANCE_OUT_VAL,
	SUM(ACC_B.BALANCE_OUT_RUB) FILTER (
		WHERE
			ACC_B.ON_DATE = (ION_DATE - INTERVAL '1 day')::DATE
	) AS BALANCE_OUT_TOTAL
FROM
	DS.MD_LEDGER_ACCOUNT_S AS LDG
	JOIN DS.MD_ACCOUNT_D AS ACC ON LDG."LEDGER_ACCOUNT" = LEFT(ACC."ACCOUNT_NUMBER", 5)::INTEGER
	LEFT JOIN DM.DM_ACCOUNT_TURNOVER_F AS ACC_TUR ON ACC_TUR.ACCOUNT_RK = ACC."ACCOUNT_RK"
	AND ACC_TUR.ON_DATE BETWEEN (ION_DATE - INTERVAL '1 month')::DATE AND (ION_DATE - INTERVAL '1 day')::DATE
	LEFT JOIN DM.DM_ACCOUNT_BALANCE_F AS ACC_B ON ACC_B.ON_DATE = (ION_DATE - INTERVAL '1 day')::DATE
	AND ACC_B.ACCOUNT_RK = ACC."ACCOUNT_RK"
GROUP BY
	LDG."LEDGER_ACCOUNT";


INSERT INTO dm.dm_f101_round_f 
SELECT
	FROM_DATE,
	TO_DATE,
	"CHAPTER",
	table_1."LEDGER_ACCOUNT",
	CHARACTERISTIC,
	BALANCE_IN_RUB,
	BALANCE_IN_VAL,
	BALANCE_IN_TOTAL,
	TURN_DEB_RUB,
	TURN_DEB_VAL,
	TURN_DEB_TOTAL,
	TURN_CRE_RUB,
	TURN_CRE_VAL,
	TURN_CRE_TOTAL,
	BALANCE_out_RUB,
	BALANCE_out_VAL,
	BALANCE_out_TOTAL
FROM
	table_1
	JOIN table_2 ON table_1."LEDGER_ACCOUNT" = table_2."LEDGER_ACCOUNT";
	
drop table table_1;
drop table table_2;

		end ;
 $$ LANGUAGE PLPGSQL;


--анонимный блок и логирование
 DO $$
declare 
my_date date := '01-02-2018'; 
begin
insert into logs.logs_ds
(etl_table, date_start, operation_status)
values ('dm_f101_round_f',clock_timestamp()::TIME,9);

call DM.FILL_F101_ROUND_F(my_date);

UPDATE logs.logs_ds 
SET
DATE_END = NOW()::TIME,
OPERATION_STATUS = 0,
TIME_ETL = clock_timestamp()::TIME - DATE_START
WHERE
OPERATION_STATUS = 9;

end $$ LANGUAGE PLPGSQL;
